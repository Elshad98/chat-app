{"version":3,"sources":["components/message/message.js","components/message/index.js","components/message-list/index.js","components/message-list/message-list.js","components/send-message-form/index.js","components/send-message-form/send-message-form.js","components/spinner/index.js","components/spinner/spinner.js","components/room-list/index.js","components/room-list/room-list.js","components/new-room-form/index.js","components/new-room-form/new-room-message.js","config.js","components/app/index.js","components/app/app.js","serviceWorker.js","index.js"],"names":["Message","props","className","username","text","MessageList","prevProps","roomId","this","node","ReactDOM","findDOMNode","scrollTop","scrollHeight","messages","map","message","index","key","senderId","renderDisplay","renderInfo","React","Component","SendMessageForm","handleChange","evt","setState","target","value","handleSubmit","preventDefault","state","sendMessage","onSubmit","disabled","onChange","placeholder","type","Spinner","RoomList","rooms","length","orderedRooms","sort","a","b","id","room","active","onClick","subscribeToRoom","name","NewRoomMessage","roomName","trim","createRoom","APP_CONFIG","instanceLocator","tokenUrl","App","getRooms","currentUser","getJoinableRooms","then","joinableRooms","joinedRooms","catch","err","console","log","hooks","onMessage","error","ChatManager","userId","tokenProvider","TokenProvider","url","connect","Boolean","window","location","hostname","match","render","document","querySelector","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.962b225b.chunk.js","sourcesContent":["import React from 'react';\r\nimport './message.css';\r\n\r\nfunction Message(props) {\r\n    return (\r\n        <div className=\"message\">\r\n            <div className=\"message-username\">\r\n                {props.username}\r\n            </div>\r\n            <div className=\"message-text\">\r\n                {props.text}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Message;","import Message from './message';\r\n\r\nexport default Message;","import MessageList from './message-list';\r\n\r\nexport default MessageList;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport Message from '../message';\r\n\r\nimport './message-list.css';\r\n\r\nclass MessageList extends React.Component {\r\n\tcomponentDidUpdate(prevProps) {\r\n\t\tif (prevProps.roomId !== this.props.roomId) {\r\n\t\t\tconst node = ReactDOM.findDOMNode(this);\r\n\t\t\tnode.scrollTop = node.scrollHeight;\r\n\t\t}\r\n\t}\r\n\r\n\trenderDisplay() {\r\n\t\tconst { messages } = this.props;\r\n\t\treturn (\r\n\t\t\t<div className=\"message-list scroll\">\r\n\t\t\t\t{messages.map((message, index) => (\r\n\t\t\t\t\t<Message key={index} username={message.senderId} text={message.text} />\r\n\t\t\t\t))}\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n\r\n\trenderInfo() {\r\n\t\treturn (\r\n\t\t\t<div className=\"message-list scroll\">\r\n\t\t\t\t<div className=\"join-room\">\r\n\t\t\t\t\t&larr; Join a room!\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n\r\n\trender() {\r\n\t\treturn this.props.roomId ? this.renderDisplay() : this.renderInfo();\r\n\t}\r\n}\r\n\r\nexport default MessageList;","import SendMessageForm from './send-message-form';\r\n\r\nexport default SendMessageForm;","import React from 'react';\r\n\r\nimport './send-message-form.css';\r\n\r\nclass SendMessageForm extends React.Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            message: ''\r\n        };\r\n    }\r\n\r\n    handleChange = (evt) => {\r\n        this.setState({\r\n            message: evt.target.value\r\n        });\r\n    }\r\n\r\n    handleSubmit = (evt) => {\r\n        evt.preventDefault();\r\n        if (this.state.message) {\r\n            this.props.sendMessage(this.state.message);\r\n        }\r\n        this.setState({\r\n            message: ''\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <form\r\n                className=\"send-message-form\"\r\n                onSubmit={this.handleSubmit}>\r\n                <input\r\n                    disabled={!this.props.disabled}\r\n                    onChange={this.handleChange}\r\n                    value={this.state.message}\r\n                    placeholder=\"Type your message and hit ENTER\"\r\n                    type=\"text\"\r\n                />\r\n            </form>\r\n        );\r\n    }\r\n}\r\n\r\nexport default SendMessageForm","import Spinner from './spinner';\r\n\r\nexport default Spinner;","import React from 'react';\r\n\r\nimport './spinner.css';\r\n\r\nconst Spinner = () => {\r\n    return (\r\n        <div className=\"lds-css ng-scope spinner\">\r\n            <div className=\"lds-double-ring spinner-container\">\r\n                <div></div>\r\n                <div></div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Spinner;","import RoomList from './room-list';\r\n\r\nexport default RoomList;","import React from 'react';\r\nimport Spinner from '../spinner';\r\n\r\nimport './room-list.css';\r\n\r\nclass RoomList extends React.Component {\r\n    render() {\r\n        const { rooms, roomId } = this.props; \r\n        if (rooms.length === 0) {\r\n            return (\r\n                <div className=\"rooms-list rooms-list-loading\">\r\n                    <Spinner />\r\n                </div>\r\n            );\r\n        }\r\n\r\n        const orderedRooms = [...rooms].sort((a, b) => a.id - b.id);\r\n        return (\r\n            <div className=\"rooms-list\">\r\n                <div className=\"help-text scroll\">\r\n                    <ul>\r\n                        <h3>Your rooms:</h3>\r\n                        {orderedRooms.map((room) => {\r\n                            const active = room.id === roomId ? 'active' : '';\r\n                            return (\r\n                                <li key={room.id} className={\"room \" + active}>\r\n                                    <button onClick={() => this.props.subscribeToRoom(room.id)}>\r\n                                        # {room.name}\r\n                                    </button>\r\n                                </li>\r\n                            )\r\n                        })}\r\n                    </ul>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default RoomList;","import NewRoomMessage from './new-room-message';\r\n\r\nexport default NewRoomMessage;","import React from 'react';\r\n\r\nimport './new-room-message.css';\r\n\r\nclass NewRoomForm extends React.Component {\r\n    constructor() {\r\n        super();\r\n\r\n        this.state = {\r\n            roomName: ''\r\n        };\r\n    }\r\n\r\n    handleChange = (evt) => {\r\n        this.setState({\r\n            roomName: evt.target.value\r\n        });\r\n    }\r\n\r\n    handleSubmit = (evt) => {\r\n        evt.preventDefault();\r\n        const roomName = this.state.roomName.trim();\r\n        if (roomName.length > 2) {\r\n            this.props.createRoom(roomName);\r\n            this.setState({\r\n                roomName: ''\r\n            });\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"new-room-form\">\r\n                <form onSubmit={this.handleSubmit}>\r\n                    <input\r\n                        onChange={this.handleChange}\r\n                        value={this.state.roomName}\r\n                        type=\"text\"\r\n                        placeholder=\"Create a room\" />\r\n                    <button id=\"create-room-btn\" type=\"submit\">+</button>\r\n                </form>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default NewRoomForm;","const APP_CONFIG = {\r\n    instanceLocator: \"v1:us1:f6f4946f-c678-4a65-9b2c-23c8e44758c8\",\r\n    tokenUrl: \"https://us1.pusherplatform.io/services/chatkit_token_provider/v1/f6f4946f-c678-4a65-9b2c-23c8e44758c8/token\"\r\n};\r\n\r\nexport default APP_CONFIG;\r\n","import App from './app';\r\n\r\nexport default App;","import React from 'react';\r\nimport MessageList from '../message-list';\r\nimport SendMessageForm from '../send-message-form';\r\nimport RoomList from '../room-list';\r\nimport NewRoomForm from '../new-room-form';\r\n\r\nimport APP_CONFIG from '../../config';\r\nimport { ChatManager, TokenProvider } from '@pusher/chatkit-client';\r\nimport '@atlaskit/css-reset';\r\n\r\nimport '../../styles/reset.css';\r\nimport '../../styles/index.css';\r\nimport './app.css';\r\n\r\n\r\nclass App extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            messages: [],\r\n            joinableRooms: [],\r\n            joinedRooms: [],\r\n            roomId: null\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        const chatManager = new ChatManager({\r\n            instanceLocator: APP_CONFIG.instanceLocator,\r\n            userId: 'Perborgen',\r\n            tokenProvider: new TokenProvider({\r\n                url: APP_CONFIG.tokenUrl\r\n            })\r\n        });\r\n        chatManager.connect()\r\n            .then(currentUser => {\r\n                this.currentUser = currentUser;\r\n                this.getRooms();\r\n            }).catch(err => {\r\n                console.log('Error on connection', err)\r\n            });\r\n    }\r\n\r\n    getRooms = () => {\r\n        this.currentUser.getJoinableRooms()\r\n            .then(joinableRooms => {\r\n                this.setState({\r\n                    joinableRooms: joinableRooms,\r\n                    joinedRooms: this.currentUser.rooms\r\n                });\r\n            })\r\n            .catch(err => {\r\n                console.log('Error on joinableRooms: ', err);\r\n            });\r\n    }\r\n\r\n    subscribeToRoom = (roomId) => {\r\n        this.setState({\r\n            messages: []\r\n        });\r\n        this.currentUser.subscribeToRoom({\r\n            roomId: roomId,\r\n            hooks: {\r\n                onMessage: message => {\r\n                    this.setState({\r\n                        messages: [...this.state.messages, message]\r\n                    });\r\n                }\r\n            }\r\n        })\r\n            .then(room => {\r\n                this.setState({\r\n                    roomId: roomId\r\n                });\r\n                this.getRooms();\r\n            })\r\n            .catch(err => {\r\n                console.error('Error on subscribing to room: ', err);\r\n            })\r\n    }\r\n\r\n    sendMessage = (text) => {\r\n        this.currentUser.sendMessage({\r\n            text: text,\r\n            roomId: this.state.roomId\r\n        });\r\n    }\r\n\r\n    createRoom = (roomName) => {\r\n        this.currentUser.createRoom({\r\n            name: roomName\r\n        })\r\n            .then(room => this.subscribeToRoom(room.id))\r\n            .catch(err => {\r\n                console.error('Error with createRoom: ', err);\r\n            });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"app\">\r\n                <RoomList\r\n                    roomId={this.state.roomId}\r\n                    subscribeToRoom={this.subscribeToRoom}\r\n                    rooms={[...this.state.joinableRooms, ...this.state.joinedRooms]} />\r\n                <MessageList\r\n                    messages={this.state.messages}\r\n                    roomId={this.state.roomId} />\r\n                <SendMessageForm\r\n                    disabled={this.state.roomId}\r\n                    sendMessage={this.sendMessage} />\r\n                <NewRoomForm createRoom={this.createRoom} />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './components/app';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.querySelector('#root'));\r\n\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}