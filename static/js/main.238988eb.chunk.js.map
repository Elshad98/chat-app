{"version":3,"sources":["components/Message.js","components/MessageList.js","components/SendMessageForm.js","components/RoomList.js","components/NewRoomForm.js","App.js","config.js","serviceWorker.js","index.js"],"names":["Message","props","react_default","a","createElement","className","username","text","MessageList","node","ReactDOM","findDOMNode","this","scrollTop","scrollHeight","messages","map","message","index","components_Message","key","senderId","roomId","renderDisplay","renderInfo","React","Component","SendMessageForm","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","handleChange","bind","assertThisInitialized","handleSubmit","evt","setState","target","value","preventDefault","sendMessage","onSubmit","disabled","onChange","placeholder","type","RoomList","orderedRooms","toConsumableArray","rooms","sort","b","id","room","active","onClick","subscribeToRoom","name","NewRoomForm","roomName","trim","length","createRoom","App","joinableRooms","joinedRooms","getRooms","_this2","ChatManager","instanceLocator","userId","tokenProvider","TokenProvider","url","connect","then","currentUser","catch","err","console","log","_this3","getJoinableRooms","_this4","hooks","onMessage","concat","_this5","components_RoomList","components_MessageList","components_SendMessageForm","components_NewRoomForm","Boolean","window","location","hostname","match","render","src_App","document","querySelector","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.238988eb.chunk.js","sourcesContent":["import React from 'react';\n\nfunction Message(props){\n    return (\n        <div className=\"message\">\n            <div className=\"message-username\">\n                {props.username}\n            </div>\n            <div className=\"message-text\">\n                {props.text}\n            </div>\n        </div>\n    );\n}\n\nexport default Message;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Message from './Message';\n\nclass MessageList extends React.Component{\n\tcomponentDidUpdate(){\n\t\tconst node = ReactDOM.findDOMNode(this);\n\t\tnode.scrollTop = node.scrollHeight;\n\t}\n\n\trenderDisplay(){\n        const messages = this.props.messages;\n\t\treturn (\n\t\t\t<div className=\"message-list\">\n                {messages.map((message, index) => (\n                    <Message key={index} username={message.senderId} text={message.text} />\n\t\t\t\t))}\n\t\t\t</div>\n\t\t);\n\t}\n\n\trenderInfo(){\n\t\treturn (\n\t\t\t<div className=\"message-list\">\n\t\t\t\t<div className=\"join-room\">\n\t\t\t\t\t&larr; Join a room!\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t);\n\t}\n\n\trender(){\n\t\treturn this.props.roomId ? this.renderDisplay() : this.renderInfo();\n\t}\n}\n\nexport default MessageList;","import React from 'react';\n\nclass SendMessageForm extends React.Component{\n    constructor(){\n        super();\n        this.state = {\n            message: ''\n        };\n        this.handleChange = this.handleChange.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n    }\n\n    handleChange(evt){\n        this.setState({\n            message: evt.target.value\n        });\n    }\n\n    handleSubmit(evt){\n        evt.preventDefault();\n        if(this.state.message){\n            this.props.sendMessage(this.state.message);\n        }\n        this.setState({\n            message: ''\n        });\n    }\n\n    render(){\n        return (\n            <form \n                className=\"send-message-form\"\n                onSubmit={this.handleSubmit}>\n                <input \n                    disabled={!this.props.disabled}\n                    onChange={this.handleChange}\n                    value={this.state.message}\n                    placeholder=\"Type your message and hit ENTER\"\n                    type=\"text\"\n                />\n            </form>\n        );\n    }\n}\n\nexport default SendMessageForm","import React from 'react';\n\nclass RoomList extends React.Component{\n    render(){\n        const orderedRooms = [...this.props.rooms].sort((a, b) => a.id - b.id);\n        return (\n            <div className=\"rooms-list\">\n                <div className=\"help-text\">\n                    <ul>\n                        <h3>Your rooms:</h3>\n                        {orderedRooms.map((room) => {\n                            const active = room.id === this.props.roomId ? 'active' : '';\n                            return (\n                                <li key={room.id} className={\"room \" + active}>\n                                    <button onClick={() => this.props.subscribeToRoom(room.id)}>\n                                        # {room.name}\n                                    </button>\n                                </li>\n                            )\n                        })}\n                    </ul>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default RoomList;","import React from 'react';\n\nclass NewRoomForm extends React.Component{\n    constructor(){\n        super();\n\n        this.state = {\n            roomName: ''\n        };\n        this.handleChange = this.handleChange.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n    }\n\n    handleChange(evt){\n        this.setState({\n            roomName: evt.target.value\n        });\n    }\n\n    handleSubmit(evt){\n        evt.preventDefault();\n        const roomName = this.state.roomName.trim();\n        if (roomName !== '' && roomName.length > 2) {\n            this.props.createRoom(roomName);\n            this.setState({\n                roomName: ''\n            });\n        }\n    }\n\n    render(){\n        return (\n            <div className=\"new-room-form\">\n                <form onSubmit={this.handleSubmit}>\n                    <input \n                        onChange={this.handleChange}\n                        value={this.state.roomName}\n                        type=\"text\" \n                        placeholder=\"Create a room\" />\n                    <button id=\"create-room-btn\" type=\"submit\">+</button>\n                </form>\n            </div>\n        );\n    }\n} \n\nexport default NewRoomForm;","import React from 'react';\nimport MessageList from './components/MessageList';\nimport SendMessageForm from './components/SendMessageForm';\nimport RoomList from './components/RoomList';\nimport NewRoomForm from './components/NewRoomForm';\n\nimport {instanceLocator, tokenUrl} from './config';\nimport { ChatManager, TokenProvider } from '@pusher/chatkit-client';\nimport '@atlaskit/css-reset';\nimport './styles/index.css';\n\n\nclass App extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            messages: [],\n            joinableRooms: [],\n            joinedRooms: [],\n            roomId: null\n        };\n        this.sendMessage = this.sendMessage.bind(this);\n        this.subscribeToRoom = this.subscribeToRoom.bind(this);\n        this.getRooms = this.getRooms.bind(this);\n        this.createRoom = this.createRoom.bind(this);\n    }\n\n    componentDidMount(){\n        const chatManager = new ChatManager({\n            instanceLocator: instanceLocator,\n            userId: 'Perborgen',\n            tokenProvider: new TokenProvider({ \n                url: tokenUrl \n            })\n        });\n        chatManager.connect()\n        .then(currentUser => {\n            this.currentUser = currentUser;\n            this.getRooms();\n        }).catch(err => {\n            console.log('Error on connection', err)\n        });\n    }\n\n    getRooms(){\n        this.currentUser.getJoinableRooms()\n        .then(joinableRooms => {\n            this.setState({\n                joinableRooms: joinableRooms,\n                joinedRooms: this.currentUser.rooms\n            });\n        })\n        .catch(err => {\n            console.log('Error on joinableRooms: ', err);\n        });\n    }\n\n    subscribeToRoom(roomId){\n       this.setState({\n            messages: []\n        });\n        this.currentUser.subscribeToRoom({\n            roomId: roomId,\n            hooks: {\n              onMessage: message => {\n                this.setState({\n                    messages: [...this.state.messages, message]\n                });\n              }\n            }\n        })\n        .then(room => {\n            this.setState({\n                roomId: roomId\n            });\n            this.getRooms();\n        })\n        .catch(err => {\n            console.log('Error on subscribing to room: ', err);\n        })\n    }\n\n    sendMessage(text){\n        this.currentUser.sendMessage({\n            text: text,\n            roomId: this.state.roomId\n        });\n    }\n\n    createRoom(roomName){\n        this.currentUser.createRoom({\n            name: roomName\n        })\n        .then(room => this.subscribeToRoom(room.id))\n        .catch(err => {\n            console.log('Error with createRoom: ', err);\n        });\n    }\n\n    render() {\n        return (\n            <div className=\"app\">\n                <RoomList \n                    roomId={this.state.roomId}\n                    subscribeToRoom={this.subscribeToRoom}\n                    rooms={[...this.state.joinableRooms, ...this.state.joinedRooms]} />\n                <MessageList \n                    messages={this.state.messages}\n                    roomId={this.state.roomId} />\n                <SendMessageForm \n                    disabled={this.state.roomId}\n                    sendMessage={this.sendMessage} />\n                <NewRoomForm createRoom={this.createRoom} />\n            </div>\n        );\n    }\n}\n\nexport default App;","const instanceLocator = \"v1:us1:f6f4946f-c678-4a65-9b2c-23c8e44758c8\";\nconst tokenUrl = \"https://us1.pusherplatform.io/services/chatkit_token_provider/v1/f6f4946f-c678-4a65-9b2c-23c8e44758c8/token\";\n\nexport {instanceLocator, tokenUrl}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.querySelector('#root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}